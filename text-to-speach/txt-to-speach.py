import asyncio
import edge_tts
import os
import shutil

from moviepy import AudioFileClip, ColorClip
from pydub import AudioSegment

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
OUTPUT_FOLDER = "output" # –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ-–∑–≤—É–∫–∏
FINAL_MP4 = "dialog_output.mp4" # –∏—Ç–æ–≥-—Ñ–∞–π–ª
DIALOG_FILE = "example.txt" # —á–∏—Ç–∞–µ–º—ã–π txt-—Ñ–∞–π–ª

# –ì–æ–ª–æ—Å–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏
voices = {
    "Speaker 1": "en-US-GuyNeural",
    "Speaker 2": "en-US-JennyNeural"
}

def parse_dialog(file_path):
    """
    –ß–∏—Ç–∞–µ—Ç txt-—Ñ–∞–π–ª
    """
    dialog_lines = []
    with open(file_path, "r", encoding="utf-8") as f:
        for line in f:
            if ":" in line:
                speaker, text = line.strip().split(":", 1)
                dialog_lines.append((speaker.strip(), text.strip()))
    return dialog_lines


async def generate_audio(dialog):
    """
    –§—É–Ω–∫—Ü–∏—è, –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ mp3-–∞—É–¥–∏–æ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º edge-tts
    """
    os.makedirs(OUTPUT_FOLDER, exist_ok=True)
    for i, (speaker, text) in enumerate(dialog):
        voice = voices.get(speaker, "en-US-GuyNeural")
        filename = os.path.join(OUTPUT_FOLDER, f"line_{i+1:02d}.mp3")
        communicate = edge_tts.Communicate(text, voice)
        print(f"üé§ Generating: {filename}")
        await communicate.save(filename)


def merge_audio_to_single_mp3():
    """
    –§—É–Ω–∫—Ü–∏—è, –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ-—Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª
    """
    files = sorted([f for f in os.listdir(OUTPUT_FOLDER) if f.endswith(".mp3")])
    combined = AudioSegment.empty()
    for file in files:
        audio = AudioSegment.from_file(os.path.join(OUTPUT_FOLDER, file))
        combined += audio + AudioSegment.silent(duration=500)
    final_audio_path = os.path.join(OUTPUT_FOLDER, "full_dialog.mp3")
    combined.export(final_audio_path, format="mp3")
    return final_audio_path


def create_mp4_from_audio(audio_path, output_path):
    """
    –§—É–Ω–∫—Ü–∏—è, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ mp4-—Ñ–æ—Ä–º–∞—Ç–∞ –≤–∏–¥–µ–æ.
    """
    audio_clip = AudioFileClip(audio_path)
    duration = audio_clip.duration

    # –ó–∞–≥–ª—É—à–∫–∞-–≤–∏–¥–µ–æ —Å —á—ë—Ä–Ω—ã–º —Ñ–æ–Ω–æ–º
    video = ColorClip(size=(1280, 720), color=(0, 0, 0), duration=duration).with_fps(24)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫ –∫ –≤–∏–¥–µ–æ
    video = video.with_audio(audio_clip)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    video.write_videofile(output_path, codec="libx264", audio_codec="aac")


if __name__ == "__main__":
    dialog = parse_dialog(DIALOG_FILE)
    asyncio.run(generate_audio(dialog))
    audio_path = merge_audio_to_single_mp3()
    create_mp4_from_audio(audio_path, FINAL_MP4)
    print(f"–ì–æ—Ç–æ–≤–æ! –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: {FINAL_MP4}")
    shutil.rmtree(OUTPUT_FOLDER)